'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = function (echarts) {
  var _class, _temp;

  return _temp = _class = function (_Component) {
    _inherits(ECahrts, _Component);

    function ECahrts() {
      _classCallCheck(this, ECahrts);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(ECahrts).apply(this, arguments));
    }

    _createClass(ECahrts, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _props = this.props;
        var option = _props.option;
        var notMerge = _props.notMerge;
        var lazyUpdate = _props.lazyUpdate;
        var theme = _props.theme;
        var initOption = _props.initOption;


        this.instance = echarts.init(this.dom, theme, initOption);
        this.instance.setOption(option, notMerge, lazyUpdate);
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(_ref) {
        var _this2 = this;

        var option = _ref.option;
        var notMerge = _ref.notMerge;
        var lazyUpdate = _ref.lazyUpdate;
        var loading = _ref.loading;

        var events = _objectWithoutProperties(_ref, ['option', 'notMerge', 'lazyUpdate', 'loading']);

        if (option !== this.props.option) this.instance.setOption(option, notMerge, lazyUpdate);
        if (loading) this.instance.showLoading();
        this.instance.hideLoading();

        // bind or unbind events
        var props = this.props;
        Object.keys(props).forEach(function (e) {
          if (props[e] !== events[e] && typeof props[e] === 'function') _this2.instance.off(toEChartsEventName(e), props[e]);
        });
        Object.keys(events).forEach(function (e) {
          if (events[e] !== props[e] && typeof events[e] === 'function') _this2.instance.on(toEChartsEventName(e), events[e]);
        });
      }
    }, {
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(_ref2) {
        var className = _ref2.className;
        var style = _ref2.style;

        return className !== this.props.className || style !== this.props.style;
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.instance.dispose();
      }
    }, {
      key: 'render',
      value: function render() {
        var _this3 = this;

        var _props2 = this.props;
        var className = _props2.className;
        var style = _props2.style;

        return _react2.default.createElement('div', { ref: function ref(dom) {
            return _this3.dom = dom;
          }, className: className, style: style });
      }
    }]);

    return ECahrts;
  }(_react.Component), _class.propTypes = {
    theme: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.string]),
    initOption: _react.PropTypes.object,
    option: _react.PropTypes.object,
    notMerge: _react.PropTypes.bool,
    lazyUpdate: _react.PropTypes.bool,
    loading: _react.PropTypes.bool,
    className: _react.PropTypes.string,
    style: _react.PropTypes.object
  }, _class.defaultProps = {
    option: {},
    notMerge: false,
    lazyUpdate: false
  }, _temp;
};

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function toEChartsEventName(eventName) {
  return eventName.startsWith('on') ? eventName.slice(2).toLowerCase() : eventName.toLowerCase();
}